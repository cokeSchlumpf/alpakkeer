{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Alpakkeer Build, Run and Operate Akka Streams applications quickly, ready for production. Documentation: cokeschlumpf.github.io/alpakkeer GitHub Repository: github.com/cokeSchlumpf/alpakkeer Alpakkeer is an opinionated Java/ Scala toolkit to build, run and operate light-weight integration applications based on Akka Streams and Alpakka . Alpakkeer bundles various libraries and components: A Web Server based on Javalin to provide simple access via REST APIs to manage Akka Streams processes and expose metrics to Prometheus and Grafana. Configuration Management based on Lightbend Config including some extensions for environment-based configurations and automatic mapping to POJOs. Prometheus Client to record application and stream metrics. Alpakkeer also provides custom FlowStages to argument your stream with Akka Streams specific metrics. An easy to use DSL for Java and Scala to compose applications. Getting Started Requirements Alpakkeer requires: Java 11+ Scala 2.13 Alpakkeer runs on: Akka 2.6.4+ Akka Streams 2.6.4+ License This project is licensed under the terms of the Apache 2.0 License.","title":"Alpakkeer"},{"location":"#alpakkeer","text":"Build, Run and Operate Akka Streams applications quickly, ready for production. Documentation: cokeschlumpf.github.io/alpakkeer GitHub Repository: github.com/cokeSchlumpf/alpakkeer Alpakkeer is an opinionated Java/ Scala toolkit to build, run and operate light-weight integration applications based on Akka Streams and Alpakka . Alpakkeer bundles various libraries and components: A Web Server based on Javalin to provide simple access via REST APIs to manage Akka Streams processes and expose metrics to Prometheus and Grafana. Configuration Management based on Lightbend Config including some extensions for environment-based configurations and automatic mapping to POJOs. Prometheus Client to record application and stream metrics. Alpakkeer also provides custom FlowStages to argument your stream with Akka Streams specific metrics. An easy to use DSL for Java and Scala to compose applications.","title":"Alpakkeer"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#requirements","text":"Alpakkeer requires: Java 11+ Scala 2.13 Alpakkeer runs on: Akka 2.6.4+ Akka Streams 2.6.4+","title":"Requirements"},{"location":"#license","text":"This project is licensed under the terms of the Apache 2.0 License.","title":"License"}]}